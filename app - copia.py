# =========================
# üìã Lista de asistencia ‚Äì Seguimiento de l√≠neas de acci√≥n (multiusuario con SQLite)
# =========================
import streamlit as st
import pandas as pd
from io import BytesIO
from datetime import date
import sqlite3

st.markdown("## üìã Lista de asistencia ‚Äì Seguimiento de l√≠neas de acci√≥n")

# ---------- DB (SQLite persistente) ----------
DB_PATH = "asistencia.db"

def get_conn():
    return sqlite3.connect(DB_PATH, check_same_thread=False, timeout=30)

def init_db():
    with get_conn() as conn:
        conn.execute("PRAGMA journal_mode=WAL;")
        conn.execute("PRAGMA synchronous=NORMAL;")
        conn.execute("""
        CREATE TABLE IF NOT EXISTS asistencia(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            created_at TEXT NOT NULL DEFAULT (datetime('now','localtime')),
            nombre TEXT, cedula TEXT, institucion TEXT,
            cargo TEXT, telefono TEXT,
            genero TEXT, sexo TEXT, edad TEXT
        );
        """)

def insert_row(row):
    with get_conn() as conn:
        conn.execute("""INSERT INTO asistencia
            (nombre, cedula, institucion, cargo, telefono, genero, sexo, edad)
            VALUES (?,?,?,?,?,?,?,?)""",
            (row["Nombre"], row["C√©dula de Identidad"], row["Instituci√≥n"],
             row["Cargo"], row["Tel√©fono"], row["G√©nero"], row["Sexo"], row["Rango de Edad"])
        )

def fetch_all_df():
    with get_conn() as conn:
        df = pd.read_sql_query("""
            SELECT id, created_at,
                   nombre  AS 'Nombre',
                   cedula  AS 'C√©dula de Identidad',
                   institucion AS 'Instituci√≥n',
                   cargo   AS 'Cargo',
                   telefono AS 'Tel√©fono',
                   genero  AS 'G√©nero',
                   sexo    AS 'Sexo',
                   edad    AS 'Rango de Edad'
            FROM asistencia
            ORDER BY id ASC
        """, conn)
    if not df.empty:
        df.insert(0, "N¬∫", range(1, len(df)+1))
    return df

init_db()

# ---------- Formulario sencillo ----------
with st.form("form_asistencia", clear_on_submit=True):
    c1, c2, c3 = st.columns([1.2, 1, 1])
    nombre      = c1.text_input("Nombre")
    cedula      = c2.text_input("C√©dula de Identidad")
    institucion = c3.text_input("Instituci√≥n")

    c4, c5 = st.columns([1, 1])
    cargo    = c4.text_input("Cargo")
    telefono = c5.text_input("Tel√©fono")

    st.markdown("#### ")
    gcol, scol, ecol = st.columns([1.1, 1.5, 1.5])
    genero = gcol.radio("G√©nero", ["F", "M", "LGBTIQ+"], horizontal=True)
    sexo   = scol.radio("Sexo (Hombre, Mujer o Intersex)", ["H", "M", "I"], horizontal=True)
    edad   = ecol.radio("Rango de Edad", ["18 a 35 a√±os", "36 a 64 a√±os", "65 a√±os o m√°s"], horizontal=True)

    submitted = st.form_submit_button("‚ûï Agregar", use_container_width=True)
    if submitted:
        if not nombre.strip():
            st.warning("Ingresa al menos el nombre.")
        else:
            fila = {
                "Nombre": nombre.strip(),
                "C√©dula de Identidad": cedula.strip(),
                "Instituci√≥n": institucion.strip(),
                "Cargo": cargo.strip(),
                "Tel√©fono": telefono.strip(),
                "G√©nero": genero,
                "Sexo": sexo,
                "Rango de Edad": edad
            }
            insert_row(fila)
            st.success("Registro guardado.")

# ---------- Vista de todo lo recibido ----------
st.markdown("### üì• Registros recibidos")
df_all = fetch_all_df()
st.dataframe(df_all if not df_all.empty else pd.DataFrame(
    columns=["N¬∫","Nombre","C√©dula de Identidad","Instituci√≥n","Cargo","Tel√©fono","G√©nero","Sexo","Rango de Edad"]),
    hide_index=True, use_container_width=True
)

# ---------- Generar Excel con el mismo formato de tu plantilla ----------
def build_excel_asistencia(rows_df: pd.DataFrame) -> bytes:
    if rows_df.empty:
        return b""
    try:
        from openpyxl import Workbook
        from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
    except Exception:
        st.error("Falta 'openpyxl' en requirements.txt")
        return b""

    wb = Workbook(); ws = wb.active; ws.title = "Asistencia"
    widths = [5, 28, 18, 24, 20, 16, 12, 12, 12, 12, 12, 12, 14, 14, 14]
    for i, w in enumerate(widths, start=1): ws.column_dimensions[chr(64+i)].width = w

    title_fill = PatternFill("solid", fgColor="1F3B73"); title_font = Font(bold=True, size=14, color="FFFFFF")
    head_fill  = PatternFill("solid", fgColor="DDE7FF"); group_fill = PatternFill("solid", fgColor="B7C6F9")
    head_font  = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    left   = Alignment(horizontal="left",   vertical="center", wrap_text=True)
    thin = Side(style="thin", color="000000"); border_all = Border(left=thin, right=thin, top=thin, bottom=thin)

    # T√≠tulo
    ws.merge_cells("A1:O1")
    c = ws["A1"]; c.value = "Lista de asistencia ‚Äì Seguimiento de l√≠neas de acci√≥n"
    c.fill, c.font, c.alignment = title_fill, title_font, center

    # Encabezados (A2:O3)
    for rng, text in [("A2:A3","N¬∫"),("B2:B3","Nombre"),("C2:C3","C√©dula de Identidad"),
                      ("D2:D3","Instituci√≥n"),("E2:E3","Cargo"),("F2:F3","Tel√©fono"),
                      ("G2:I2","G√©nero"),("J2:L2","Sexo (Hombre, Mujer o Intersex)"),("M2:O2","Rango de Edad")]:
        ws.merge_cells(rng); cell = ws[rng.split(":")[0]]
        cell.value = text; cell.alignment = center; cell.font = head_font
        cell.fill = group_fill if rng in ["G2:I2","J2:L2","M2:O2"] else head_fill
    for addr, txt in {"G3":"F","H3":"M","I3":"LGBTIQ+","J3":"H","K3":"M","L3":"I",
                      "M3":"18 a 35 a√±os","N3":"36 a 64 a√±os","O3":"65 a√±os o m√°s"}.items():
        cell = ws[addr]; cell.value = txt; cell.font = head_font; cell.alignment = center; cell.fill = head_fill
    for r in range(2,4):
        for cidx in range(1,16): ws.cell(row=r, column=cidx).border = border_all

    # Cuerpo
    start = 4
    for i, row in rows_df.iterrows():
        rr = start + i
        vals = [row["N¬∫"], row["Nombre"], row["C√©dula de Identidad"], row["Instituci√≥n"], row["Cargo"], row["Tel√©fono"]]
        for cidx, v in enumerate(vals, start=1):
            cell = ws.cell(row=rr, column=cidx, value=v); cell.border = border_all
            cell.alignment = center if cidx == 1 else left
        # Marcar X seg√∫n columnas de texto
        g, s, e = row["G√©nero"], row["Sexo"], row["Rango de Edad"]
        marks = ["X" if g=="F" else "", "X" if g=="M" else "", "X" if g=="LGBTIQ+" else "",
                 "X" if s=="H" else "", "X" if s=="M" else "", "X" if s=="I" else "",
                 "X" if e.startswith("18") else "", "X" if e.startswith("36") else "", "X" if e.startswith("65") else ""]
        for off, v in enumerate(marks, start=7):
            cell = ws.cell(row=rr, column=off, value=v); cell.border = border_all; cell.alignment = center

    ws.freeze_panes = "B4"
    bio = BytesIO(); wb.save(bio); return bio.getvalue()

# Bot√≥n de descarga (todos los registros)
if not df_all.empty:
    xls_bytes = build_excel_asistencia(df_all[[
        "N¬∫","Nombre","C√©dula de Identidad","Instituci√≥n","Cargo","Tel√©fono","G√©nero","Sexo","Rango de Edad"
    ]])
    st.download_button(
        "‚¨áÔ∏è Descargar Excel (todos los registros)",
        data=xls_bytes,
        file_name=f"Lista_Asistencia_LineasAccion_{date.today():%Y%m%d}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        use_container_width=True
    )
else:
    st.info("A√∫n no hay registros guardados.")






